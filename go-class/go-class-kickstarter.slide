Go Class - Kickstarter
Zalando TechAcademy
09:30 24 Oct 2019



Tags: Go, TechAcademy

Sandor Sz√ºcs
Software Engineer, Zalando
sandor.szuecs@zalando.de
https://sandor.szuecs.net/
@sszuecs

* Requirements
- install https://golang.org/doc/install
- *optional*: set ENV: GOROOT, GOPATH, GOBIN
- test: https://golang.org/doc/install#testing
- If you are not prepared, use [[https://play.golang.org/][https://play.golang.org/]]

Editors

- [[https://code.visualstudio.com/][VSCode]]
- [[https://www.sublimetext.com/][Sublime Text]]
- emacs, vim
- [[https://www.jetbrains.com/go/][GoLand]]

* Slides available

[[http://go-talks.appspot.com/github.com/mneverov/slides/go-class/go-class-kickstarter.slide][slides]]

Google chat: [[https://chat.google.com/room/AAAA5wplaCc][#guild-golang]]

Feedback form: [[https://bit.ly/2wpJF1O][https://bit.ly/2wpJF1O]]

* Why go?
- Fast and fast to compile
- Concurrency + no GIL: CPU bound computation can use more then 1 core
- support for Closures (Lambda, anonymous functions)
- Easy to read and to write
- Tooling ([[https://golang.org/pkg/testing/][testing]], [[https://golang.org/pkg/testing/#example_B_RunParallel][benchmarking]], [[https://golang.org/pkg/net/http/pprof/][profiling]], [[https://golang.org/cmd/trace/][tracing]], [[https://github.com/uber/go-torch][flamegraph]])

*statically* *linked* binaries (no libc required!):

- Docker container *<* *20MB* (you only need: *FROM* *scratch*, or use FROM registry.opensource.zalan.do/stups/alpine, if you need internal ZalandoCA)
- create clients for all major OS (Linux, MacOSX, Windows)

* Why go?
- Many big projects in Go: K8s, Influxdb, Docker, ..
- Many companies are using it including Google, Soundcloud, Uber, Zalando:
- [[https://github.com/zalando/skipper][Zalando's HTTP router]] https://github.com/zalando/skipper
- [[https://github.com/prometheus/prometheus][SoundCloud's Prometheus]] https://github.com/prometheus/prometheus
- [[https://eng.uber.com/go-geofence/][Uber's geofence lookups]]

* Hello World
    % go run hello.go
.play -edit src/basics/hello.go

* Goals of Go
- The *efficiency* of a statically-typed compiled language
- with *ease* of programming of a dynamic language.
- Safety: type-safe and memory-safe.
- Good support for *concurrency* and communication.
- Efficient, *latency-free* garbage collection.
- *High-speed* compilation.
.caption Goals 2009 by Rob Pike

* Basics - var
.play -edit src/basics/basics_var.go /const c int/,

* Basics - string
.play -edit src/basics/basics_string.go /func main/,

* Basics - branches
.play -edit src/basics/branches.go /func main/,

* Basics - loops - infinite & while
.code src/basics/loop.go /func main/,

* Basics - loops - index & range
.play -edit src/basics/loop_range.go /func main/,

* Basics - functions
- Function arguments are always call by value also pointers will be copied!
- A function signature can be used as a type

* Basics - functions example
.play -edit src/basics/functions.go /type f/,

* Basics - Pointers
.play -edit src/basics/ptr.go /func set/,

* Basics - struct
.play -edit src/basics/struct.go /type T/,

* Basics - OO
- no type hierarchy
- structs, pointers and methods
.play -edit src/basics/basics_oo.go /type Foo/,

* Example stdlib - bytes.Buffer

.play -edit src/basics/bytes_buffer.go

* Exame 1 - Write a function that implements string reverse (Hint: string is immutable, use bytes.Buffer or a = append(a, s[2]))

  package main

  import "fmt"

  func main() {
      fmt.Println(reverse("abc"))
  }

  func reverse(s string) string {
      // TODO
  }

* expected result
  $ GOPATH=`pwd` go run exame1.go
  cba

* Solution Exame 1
.play -edit src/exame1/exame1.go  /func reverse/,

* err idiom - example
.play -edit src/basics/err.go /func read/,

* Basics - package and exported names
- package declaration creates a namespace for variables, types, methods, functions, ..
.code src/x/a.go

* Basics - package and exported names
.code pkg_main.go

* Exame 2 - Refactor your string reverse function to a method on type RString

  // $ cat ./src/rstring/rstring.go
  package rstring

  type RString struct {
  	S string
  }

  func NewRString(s string) RString {
  	return RString{S: s}
  }

  func (s RString) Reverse() RString {
        // TODO
  }

  // run it: $ GOPATH=`pwd` go run exame2.go
  // $ cat ./exame2.go
  package main
  import "rstring"
  func main() {
    rs := rstring.NewRString("hello world")
    fmt.Println(rs.Reverse())
  }

* expected result
  $ GOPATH=`pwd` go run exame2.go
  {dlrow olleh}

* Solution Exame 2
.code src/exame2/src/rstring/rstring.go  /^import .*/,/\)/
.code src/exame2/src/rstring/rstring.go  /START OMIT/,

* Basics - interface
- Specify behaviour of a method defined by: (name, parameter, return value)
- Interfaces are implicitly satisfied
- Interfaces are composable
- Interfaces is a solution for not having generics
- Interfaces are dynamic dispatch
- empty interface is similar to Object in java: interface{}

* Basics - interface Example
.play -edit src/basics/interface.go

* Basics - interface stdlib Examples
- stringer
    String() string
- io.Reader
    Read(p []byte) (n int, err error)
- sort.Interface
    Len() int
    Less(i,j int) bool
    Swap(i,j int)

* Basics - interfaces are composable
.code src/basics/readwriter.go

* Basics - implement Stringer interface
.play -edit src/basics/a_stringer.go /type Foo/,

* Basics - implement Stringer interface - GOTCHA
.play -edit src/basics/wrong_stringer.go /type Foo/,

* Basics - GOTCHA2
.play -edit src/basics/gotcha2.go /type SuperString/,

* Exame 3 - Implement the stringer and sort interface on type RString and a list of RString

  package rstring

  type RString struct { S string }

  // String implements the stringer interface
  func (s RString) String() string {
      // TODO
  }

  type SortableRString []RString

  // implement the sort interface
  func (s SortableRString) Len() int {
      TODO
  }
  func (s SortableRString) Less(i,j int) bool {
      TODO
  }
  func (s SortableRString) Swap(i,j int) {
      TODO
  }

* expected result
  $ GOPATH=`pwd` go run exame3.go
  [hello world a abc ab]
  [a ab abc hello world]

.code src/exame3/exame3.go  /START OMIT/,

* Solution Exame 3
.code src/exame3/src/rstring/rstring.go /START OMIT/,

* Recap: type system
- strong, static types
- no subtyping nor inheritance
- normal method calls: static dispatch
- dynamic dispatch -> use interfaces
- type inference:  x := 0  // same as: var x int = 0
- no generics -> use interfaces or code generation
- no exceptions -> use err != nil check and defer fd.Close()
- [[https://blog.golang.org/generics-next-step][Generics next step]], [[https://go2goplay.golang.org/][playground]]

* array, slice, map
- array: static size!
    ary := [10]int64
    ary2 := [...]float64{7.0, 8.5, 9.1}
- slice: array that can grow
    sl := []int64
    sl2 := []float64{7.0, 8.5, 9.1}
- map: HashMap
   h := map[string]int {
      "foo": 23,
      "bar": 42,
   }

* array, slice, map - iterator
	sl2 := []float64{7.0, 8.5, 9.1}
	for idx, item := range sl2 {
		fmt.Printf("%d: %0.2f\n", idx, item)
	}

	h := map[string]int{
		"foo": 23,
		"bar": 42,
	}
	for k, v := range h {
		fmt.Printf("%s: %d\n", k, v)
	}

* References - Learn GO
.link https://tour.golang.org/welcome/1
.link https://golang.org/doc/code.html
.link https://golang.org/doc/effective_go.html
.link https://blog.golang.org/
.link https://talks.golang.org/

.link https://learning.oreilly.com/videos/intermediate-go-programming/9781491944073
.link https://learning.oreilly.com/learning-paths/learning-path-go/9781491990384/

* Feedback
[[https://bit.ly/2wpJF1O][https://bit.ly/2wpJF1O]]


####### slide magic
# [[http://reallink][link name]]
# .play -edit x.go
# .code x.go /^func main/,/^}/
# .play y.go
# .image image.jpg
# .iframe http://foo
# .link http://foo label
# .html file.html
###################
